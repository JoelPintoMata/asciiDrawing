package com.asciiDrawing;

import org.junit.Assert;
import org.junit.Test;

/**
 * ASCIIDrawing test class
 */
public class AsciiDrawingTest{

    @Test
    public void drawCanvasTest() {
        AsciiDrawing asciiDrawing = new AsciiDrawing();
        Assert.assertNull(asciiDrawing.getCanvas());

        char[][] canvas = new char[][]{
                {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'}
        };
        asciiDrawing.draw("C", "20", "4");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);
    }

    @Test
    public void drawLines() {
        AsciiDrawing asciiDrawing = new AsciiDrawing();
        asciiDrawing.draw("C", "20", "4");

        char[][] canvas = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|','x','x','x','x','x','x',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
        };
        asciiDrawing.draw("L", "1", "2", "6", "2");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

        asciiDrawing = new AsciiDrawing();
        asciiDrawing.draw("C", "20", "4");

        canvas = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|','x','x','x','x','x','x',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
        };

//        we can draw lines left to right and right to left
        asciiDrawing.draw("L", "6", "2", "1", "2");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

//        we cannot draw over the canvas limits
        asciiDrawing.draw("L", "0", "0", "0", "0");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

//        we can draw over the same line
        asciiDrawing.draw("L", "6", "2", "1", "2");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

        canvas = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|','x','x','x','x','x','x',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ',' ','x',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ',' ','x',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
        };

        asciiDrawing.draw("L", "6", "3", "6", "4");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

        asciiDrawing = new AsciiDrawing();
        asciiDrawing.draw("C", "20", "4");
        asciiDrawing.draw("L", "6", "2", "1", "2");

        canvas = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|','x','x','x','x','x','x',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ',' ','x',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ',' ','x',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
        };

//        we can draw lines top to bottom and bottom to top
        asciiDrawing.draw("L", "6", "4", "6", "3");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

//        we cannot draw over the canvas limits
        asciiDrawing.draw("L", "6", "0", "6", "4");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

//        we cannot draw lines leading outside the canvas
        asciiDrawing.draw("L", "6", "2", "30", "2");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

//        we cannot draw lines that are not horizontal or vertical
        asciiDrawing.draw("L", "1", "2", "2", "1");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);
    }

    @Test
    public void drawRectangle() {
        AsciiDrawing asciiDrawing = new AsciiDrawing();
        asciiDrawing.draw("C", "20", "4");

        char[][] canvas = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','x','x','x','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x',' ',' ',' ','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','x','x','x','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
        };

        asciiDrawing.draw("R", "16", "1", "20", "3");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

        asciiDrawing = new AsciiDrawing();
        asciiDrawing.draw("C", "20", "4");

        canvas = new char[][]{
                {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
                {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                {'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
                {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'}
        };

//        we cannot draw over the limits
        asciiDrawing.draw("R", "16", "0", "20", "3");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

//        we cannot draw over the limits
        asciiDrawing.draw("R", "16", "1", "21", "3");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

        asciiDrawing = new AsciiDrawing();
        asciiDrawing.draw("C", "20", "4");

        canvas = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','x','x','x','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x',' ',' ',' ','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','x','x','x','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
        };

//        we can draw rectangles from different starting points
        asciiDrawing.draw("R", "20", "3", "16", "1");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

        asciiDrawing = new AsciiDrawing();
        asciiDrawing.draw("C", "20", "4");

        canvas = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','x','x','x','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x',' ',' ',' ','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','x','x','x','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
        };

//        we can draw rectangles from different starting points
        asciiDrawing.draw("R", "16", "3", "20", "1");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

        asciiDrawing = new AsciiDrawing();
        asciiDrawing.draw("C", "20", "4");

        canvas = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','x','x','x','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
        };

//        we can draw rectangles like lines
        asciiDrawing.draw("R", "16", "3", "20", "3");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);
    }

    @Test
    public void drawAreaFill() {
        AsciiDrawing asciiDrawing = new AsciiDrawing();
        asciiDrawing.draw("C", "20", "4");

        char[][] canvas = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                {'|','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','|'},
                {'|','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','|'},
                {'|','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','|'},
                {'|','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','|'},
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
        };

//        we can fill the whole canvas
        asciiDrawing.draw("B", "16", "3", "o");
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

        asciiDrawing = new AsciiDrawing();
        asciiDrawing.draw("C", "20", "4");
        asciiDrawing.draw("L", "2", "2", "4", "2");
        asciiDrawing.draw("L", "3", "1", "3", "3");

//        we can fill the whole canvas
        asciiDrawing.draw("B", "16", "3", "o");

        canvas = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                {'|','o','o','x','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','|'},
                {'|','o','x','x','x','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','|'},
                {'|','o','o','x','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','|'},
                {'|','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','|'},
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
        };
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);

        asciiDrawing = new AsciiDrawing();
        asciiDrawing.draw("C", "20", "4");
        asciiDrawing.draw("R", "16", "1", "20", "3");

//        we can fill inside a rectangle
        asciiDrawing.draw("B", "17", "2", "o");

        canvas = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','x','x','x','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','o','o','o','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','x','x','x','x','x','|'},
                {'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
                {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}
        };
        Assert.assertEquals(asciiDrawing.getCanvas(), canvas);
    }
}
